var _user$project$Main$decoder = A3(
	_elm_lang$core$Json_Decode$object2,
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'type', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'text', _elm_lang$core$Json_Decode$string));
var _user$project$Main$viewReply = function (model) {
	return (!_elm_lang$core$Native_Utils.eq(model.replyError, '')) ? A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'opacity', _1: '1'}
					])),
				_elm_lang$html$Html_Attributes$class('error-message')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(model.replyError)
			])) : ((_elm_lang$core$Native_Utils.cmp(model.replyTime, 0) > 0) ? A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'opacity', _1: '1'}
					])),
				_elm_lang$html$Html_Attributes$class('text-message')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(model.reply)
			])) : A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'opacity', _1: '0'}
					])),
				_elm_lang$html$Html_Attributes$class('text-message')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(model.reply)
			])));
};
var _user$project$Main$capitalize = function (word) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_elm_lang$core$String$toUpper(
			A2(_elm_lang$core$String$left, 1, word)),
		A2(_elm_lang$core$String$dropLeft, 1, word));
};
var _user$project$Main$Model = F5(
	function (a, b, c, d, e) {
		return {name: a, email: b, reply: c, replyTime: d, replyError: e};
	});
var _user$project$Main$init = {
	ctor: '_Tuple2',
	_0: A5(_user$project$Main$Model, '', '', '', 0, ''),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$Main$Tick = function (a) {
	return {ctor: 'Tick', _0: a};
};
var _user$project$Main$subscriptions = function (model) {
	return A2(_elm_lang$core$Time$every, _elm_lang$core$Time$second, _user$project$Main$Tick);
};
var _user$project$Main$PostSucceed = function (a) {
	return {ctor: 'PostSucceed', _0: a};
};
var _user$project$Main$PostFail = function (a) {
	return {ctor: 'PostFail', _0: a};
};
var _user$project$Main$submit = function (model) {
	var request = {
		verb: 'POST',
		headers: _elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 'Content-Type', _1: 'application/x-www-form-urlencoded'}
			]),
		url: 'submit_email.php',
		body: _evancz$elm_http$Http$string(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'name=',
				A2(
					_elm_lang$core$Basics_ops['++'],
					model.name,
					A2(_elm_lang$core$Basics_ops['++'], '&email=', model.email))))
	};
	return A3(
		_elm_lang$core$Task$perform,
		_user$project$Main$PostFail,
		_user$project$Main$PostSucceed,
		A2(
			_evancz$elm_http$Http$fromJson,
			_user$project$Main$decoder,
			A2(_evancz$elm_http$Http$send, _evancz$elm_http$Http$defaultSettings, request)));
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Name':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							name: _user$project$Main$capitalize(_p0._0)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Email':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{email: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Submit':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$submit(model)
				};
			case 'PostFail':
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'PostSucceed':
				var _p2 = _p0._0._1;
				var _p1 = _p0._0._0;
				switch (_p1) {
					case 'message':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{reply: _p2, replyTime: 10, replyError: ''}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'error':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{reply: '', replyTime: -1, replyError: _p2}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
				}
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{replyTime: model.replyTime - 1}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$Submit = {ctor: 'Submit'};
var _user$project$Main$Email = function (a) {
	return {ctor: 'Email', _0: a};
};
var _user$project$Main$Name = function (a) {
	return {ctor: 'Name', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('header-img')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$img,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$src('Hitboxlogo.png')
							]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('prompt')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Enter your name and email to receive updates on Hitbox')
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('inputs')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$input,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$type$('text'),
								_elm_lang$html$Html_Attributes$placeholder('Full Name'),
								_elm_lang$html$Html_Events$onInput(_user$project$Main$Name)
							]),
						_elm_lang$core$Native_List.fromArray(
							[])),
						A2(
						_elm_lang$html$Html$input,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$type$('email'),
								_elm_lang$html$Html_Attributes$placeholder('Email'),
								_elm_lang$html$Html_Events$onInput(_user$project$Main$Email)
							]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('submit-button')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(_user$project$Main$Submit)
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Submit')
							]))
					])),
				_user$project$Main$viewReply(model)
			]));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$Main$init, view: _user$project$Main$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})
};
